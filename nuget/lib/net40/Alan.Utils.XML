<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alan.Utils</name>
    </assembly>
    <members>
        <member name="M:Alan.Utils.ExtensionMethods.ExCollection.ExForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            集合遍历
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExCollection.ExForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            集合遍历
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExOverride``2(``0,``1,System.Action{System.Reflection.PropertyInfo,System.Reflection.PropertyInfo})">
            <summary>
            重写属性
            </summary>
            <typeparam name="TDestination">目标类型(this的类型)</typeparam>
            <typeparam name="TSource">值来源类型</typeparam>
            <param name="destination">目标对象(被重写的对象)</param>
            <param name="source">值来源对象</param>
            <param name="callback">嵌套循环里的回调 (TDestination Property, TSource Property)</param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExOverride``2(``0,``1,System.Func{System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            重写属性
            </summary>
            <typeparam name="TDestination">目标类型(this的类型)</typeparam>
            <typeparam name="TSource">值来源类型</typeparam>
            <param name="destination">目标对象(被重写的对象)</param>
            <param name="source">值来源对象</param>
            <param name="callback">判断是否应该重写的回调</param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExOverrideSimple``2(``0,``1)">
            <summary>
             简单重写属性(根据属性名和属性类型匹配)
            </summary>
            <typeparam name="TDestination">目标类型(this的类型)</typeparam>
            <typeparam name="TSource">值来源类型</typeparam>
            <param name="destination">目标对象(被重写的对象)</param>
            <param name="source">值来源对象</param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExOverrideSimple``2(``0,``1,System.Func{System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            简单重写属性(根据属性名和属性类型匹配和callback匹配) 
            </summary>
            <typeparam name="TDestination">目标类型(this的类型)</typeparam>
            <typeparam name="TSource">值来源类型</typeparam>
            <param name="destination">目标对象(被重写的对象)</param>
            <param name="source">值来源对象</param>
            <param name="callback">条件回调 (TDestination Property, TSource Property)</param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExOverrideExclude``2(``0,``1,System.String[])">
            <summary>
            重写值排除指定的属性
            </summary>
            <typeparam name="TDestination">目标类型(this的类型)</typeparam>
            <typeparam name="TSource">值来源类型</typeparam>
            <param name="destination">目标对象(被重写的对象)</param>
            <param name="source">值来源对象</param>
            <param name="excludes">需要排除的属性名称</param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExOverrideExclude``2(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            重写值排除指定的属性
            </summary>
            <typeparam name="TDestination">目标类型(this的类型)</typeparam>
            <typeparam name="TSource">值来源类型</typeparam>
            <param name="destination">目标对象(被重写的对象)</param>
            <param name="source">值来源对象</param>
            <param name="properties">需要排除的属性列表表达式</param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExOverrideInclude``2(``0,``1,System.String[])">
            <summary>
            重写值包含指定的属性
            </summary>
            <typeparam name="TDestination">目标类型(this的类型)</typeparam>
            <typeparam name="TSource">值来源类型</typeparam>
            <param name="destination">目标对象(被重写的对象)</param>
            <param name="source">值来源对象</param>
            <param name="includes">包含的属性名</param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExOverrideInclude``2(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            重写值包含指定的属性
            </summary>
            <typeparam name="TDestination">目标类型(this的类型)</typeparam>
            <typeparam name="TSource">值来源类型</typeparam>
            <param name="destination">目标对象(被重写的对象)</param>
            <param name="source">值来源对象</param>
            <param name="expression">属性列表表达式</param>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.CollectNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            通过Lambda表达式获取传递进来的属性的名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExGetPropValue``2(``0,System.String,``1)">
            <summary>
            动态获取对象属性值
            </summary>
            <typeparam name="TCurrent">当前对象类型</typeparam>
            <typeparam name="TOut">输出类型</typeparam>
            <param name="current">当前对象</param>
            <param name="propertyName">属性名称</param>
            <param name="defWhenFail">当获取失败时的值</param>
            <returns></returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExSetPropValue``1(``0,System.String,System.Object)">
            <summary>
            动态设置对象的值
            </summary>
            <typeparam name="TCurrent">当前对象类型</typeparam>
            <param name="current">当前对象</param>
            <param name="propertyName">属性名</param>
            <param name="value">属性值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExToDictionary``1(``0)">
            <summary>
            将一个对象转换成字典
            </summary>
            <typeparam name="TCurrent">当前对象类型</typeparam>
            <param name="current">当前对象</param>
            <returns>字典</returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExToDictionary``1(``0,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将一个对象转换成字典, 并附加额外的字典数据
            </summary>
            <typeparam name="TCurrent">当前对象类型</typeparam>
            <param name="current">当前对象</param>
            <param name="append">额外的字典数据</param>
            <returns>字典</returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExReflection.ExToListDictionary``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将数组转换成字典列表
            </summary>
            <typeparam name="TCurrent"></typeparam>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExConvert.ExChangeType``1(System.Object,``0)">
            <summary>
            类型转换
            </summary>
            <typeparam name="TOut">输出类型</typeparam>
            <param name="obj"></param>
            <param name="defWhenFail">转换失败时的替换值</param>
            <returns></returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExConvert.ExToJson``1(``0)">
            <summary>
            转成JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExConvert.ExJsonToEntity``1(System.String)">
            <summary>
            JSON转实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExConvert.ExJsonTryToEntity``1(System.String,``0)">
            <summary>
            JSON以安全的方式转实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="whenFail"></param>
            <returns></returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExConvert.ExToXml``1(``0)">
            <summary>
            转成XML字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExConvert.eXmlToEntity``1(System.String)">
            <summary>
            XML转实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Alan.Utils.ExtensionMethods.ExConvert.eXmlTryToEntity``1(System.String,``0)">
            <summary>
            XML以安全的方式转实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <param name="whenFail"></param>
            <returns></returns>
        </member>
        <member name="T:Alan.Utils.UtililyMethods.Nameof`1">
            <summary>
            获取参数/属性名 类似于 C# 6.0 中的 nameof 表达式
            http://stackoverflow.com/questions/301809/workarounds-for-nameof-operator-in-c-typesafe-databinding
            </summary>
        </member>
    </members>
</doc>
